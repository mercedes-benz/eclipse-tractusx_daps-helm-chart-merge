{{- $fullName := include "daps-server.fullname" . -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "daps-server.fullname" . }}
  labels:
    {{- include "daps-server.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "daps-server.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "daps-server.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "daps-server.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
      - name: init-fill-pvc
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        securityContext:
          {{- toYaml .Values.securityContext | nindent 10 }}
        command:
        - "sh"
        - "-c"
        args:
        - |
          mkdir -p /tmp/config /tmp/keys
          # ls /tmp/
          if [ ! -f /tmp/config/users.yml ]; then
            echo "File users.yml not found in pvc!. Creating empty file"
            touch /tmp/config/users.yml
          fi
          if [ -d /tmp/key.pem ]; then
            echo "Fix key is directory"
            rm -rf /tmp/key.pem
          fi
          if [ ! -f /tmp/key.pem ]; then
            echo "File key.pem not found in pvc!. Generating new key!"
            openssl genrsa -out /tmp/key.pem 1024
          fi
          if [ ! -f /tmp/config/clients.yml ]; then
            echo "File clients.yml not found in pvc! Creating a new one with default admin client"
            {{- if .Values.omejdn.createDefaultAdmin }}
            cp /tmp2/clients.yml /tmp/config/clients.yml
            {{- else }}
            touch /tmp/config/clients.yml
            {{- end }}
          fi
          # mounting as configmap is not an option as server expects this file writeable
          if [ ! -f /tmp/config/omejdn.yml ]; then
            echo "File omejdn.yml not found in pvc! Creating a new one with default admin client"
            {{- if .Values.omejdn.createDefaultAdmin }}
            cp /tmp2/omejdn.yml /tmp/config/omejdn.yml
            {{- else }}
            touch /tmp/config/omejdn.yml
            {{- end }}
          fi
          if [ ! -f /tmp/config/scope_mapping.yml ]; then
            echo "File scope_mapping.yml not found in pvc! Creating a new one with default admin client"
            {{- if .Values.omejdn.createDefaultAdmin }}
            cp /tmp2/scope_mapping.yml /tmp/config/scope_mapping.yml
            {{- else }}
            touch /tmp/config/scope_mapping.yml
            {{- end }}
          fi
        volumeMounts:
        - name: config
          mountPath: /tmp/
          readOnly: false
        - mountPath: /tmp2/clients.yml
          name: clients-config
          subPath: clients.yml
        - mountPath: /tmp2/omejdn.yml
          name: omejdn-config
          subPath: omejdn.yml
        - mountPath: /tmp2/scope_mapping.yml
          name: scope-mapping-config
          subPath: scope_mapping.yml
        - mountPath: /opt/keys
          name: config
          subPath: keys
          readOnly: false
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
          - name: OMEJDN_PLUGINS
            value: {{ .Values.omejdn.serverKeyFolderPath }}/config/plugins.yml
          - name: OMEJDN_JWT_AUD_OVERRIDE
            value: "idsc:IDS_CONNECTORS_ALL"
          - name: OMEJDN_IGNORE_ENV
            value: "true"
          {{- if .Values.omejdn.createDefaultAdmin }}
          - name: OMEJDN_ADMIN
            value: {{ .Values.omejdn.defaultAdminUser }}
          {{- end }}
          {{- range $key, $val := .Values.env.secret }}
          - name: {{ $key }}
            valueFrom:
              secretKeyRef:
                name: {{ $fullName }}
                key: {{ $key }}
          {{- end}}
          {{- range $key, $val := .Values.env.config }}
          - name: {{ $key }}
            valueFrom:
              secretKeyRef:
                name: {{ $fullName }}
                key: {{ $key }}
          {{- end}}
          ports:
            - name: http
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
          #livenessProbe:
          #  httpGet:
          #    path: http://localhost:4567/.well-known/openid-configuration
          #    port: http
          #    scheme: HTTP
          #  failureThreshold: 3
          #  periodSeconds: 3
          readinessProbe:
           httpGet:
             path:  http://localhost:4567/.well-known/openid-configuration
             port: http
             scheme: HTTP
           failureThreshold: 3
           periodSeconds: 1
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
          - mountPath: {{ .Values.omejdn.serverKeyFolderPath }}/config
            name: config
            subPath: config
            readOnly: false
          - mountPath: {{ .Values.omejdn.serverKeyFolderPath }}/config/plugins.yml
            name: plugins-config
            subPath: plugins.yml
            readOnly: false
          - mountPath: {{ .Values.omejdn.serverKeyFolderPath }}/key.pem
            name: config
            subPath: key.pem
          - mountPath: {{ .Values.omejdn.serverKeyFolderPath }}/keys
            name: config
            subPath: keys
            readOnly: false
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      volumes:
      - name: config
        persistentVolumeClaim:
          claimName: {{ include "daps-server.fullname" . }}
      {{- if .Values.omejdn.serverKey }}
      - name: server-key
        secret:
          secretName: {{ include "daps-server.fullname" . }}
          items:
          - key: key.pem
            path: key.pem
      {{- end }}
      - name: plugins-config
        configMap:
          name: {{ include "daps-server.fullname" . }}
          items:
          - key: plugins.yml
            path: plugins.yml
      - name: omejdn-config
        configMap:
          name: {{ include "daps-server.fullname" . }}
          items:
          - key: omejdn.yml
            path: omejdn.yml
      - name: scope-mapping-config
        configMap:
          name: {{ include "daps-server.fullname" . }}
          items:
          - key: scope_mapping.yml
            path: scope_mapping.yml
      - name: clients-config
        configMap:
          name: {{ include "daps-server.fullname" . }}
          items:
          - key: clients.yml
            path: clients.yml
